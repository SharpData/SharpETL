package com.github.sharpdata.sharpetl.flink.extra.driver

import java.sql.{Blob, CallableStatement, Clob, Connection, DatabaseMetaData, NClob, PreparedStatement, SQLWarning, SQLXML, Savepoint, Statement, Struct}
import java.util.Properties
import java.util.concurrent.Executor
import java.{sql, util}
import scala.jdk.CollectionConverters._

// scalastyle:off
class FlinkJdbcConnection extends Connection {

  override def createStatement(): Statement = new FlinkJdbcStatement()

  override def prepareStatement(sql: String): PreparedStatement = new FlinkJdbcPreparedStatement(sql)

  override def prepareCall(sql: String): CallableStatement = null

  override def nativeSQL(sql: String): String = sql

  override def setAutoCommit(autoCommit: Boolean): Unit = ()

  override def getAutoCommit: Boolean = false

  override def commit(): Unit = ()

  override def rollback(): Unit = ()

  override def close(): Unit = ()

  override def isClosed: Boolean = false

  override def getMetaData: DatabaseMetaData = new FlinkDatabaseMetaData()

  override def setReadOnly(readOnly: Boolean): Unit = ()

  override def isReadOnly: Boolean = false

  override def setCatalog(catalog: String): Unit = ()

  override def getCatalog: String = ""

  override def setTransactionIsolation(level: Int): Unit = ()

  override def getTransactionIsolation: Int = 0

  override def getWarnings: SQLWarning = null

  override def clearWarnings(): Unit = ()

  override def createStatement(resultSetType: Int, resultSetConcurrency: Int): Statement = null

  override def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement = null

  override def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int): CallableStatement = null

  override def getTypeMap: util.Map[String, Class[_]] = Map.empty[String, Class[_]].asJava

  override def setTypeMap(map: util.Map[String, Class[_]]): Unit = ()

  override def setHoldability(holdability: Int): Unit = ()

  override def getHoldability: Int = 0

  override def setSavepoint(): Savepoint = null

  override def setSavepoint(name: String): Savepoint = null

  override def rollback(savepoint: Savepoint): Unit = ()

  override def releaseSavepoint(savepoint: Savepoint): Unit = ()

  override def createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): Statement = null

  override def prepareStatement(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): PreparedStatement = null

  override def prepareCall(sql: String, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): CallableStatement = null

  override def prepareStatement(sql: String, autoGeneratedKeys: Int): PreparedStatement = null

  override def prepareStatement(sql: String, columnIndexes: Array[Int]): PreparedStatement = null

  override def prepareStatement(sql: String, columnNames: Array[String]): PreparedStatement = null

  override def createClob(): Clob = null

  override def createBlob(): Blob = null

  override def createNClob(): NClob = null

  override def createSQLXML(): SQLXML = null

  override def isValid(timeout: Int): Boolean = false

  override def setClientInfo(name: String, value: String): Unit = ()

  override def setClientInfo(properties: Properties): Unit = ()

  override def getClientInfo(name: String): String = ""

  override def getClientInfo: Properties = null

  override def createArrayOf(typeName: String, elements: Array[AnyRef]): sql.Array = null

  override def createStruct(typeName: String, attributes: Array[AnyRef]): Struct = null

  override def setSchema(schema: String): Unit = ()

  override def getSchema: String = ""

  override def abort(executor: Executor): Unit = ()

  override def setNetworkTimeout(executor: Executor, milliseconds: Int): Unit = ()

  override def getNetworkTimeout: Int = 0

  override def unwrap[T](iface: Class[T]): T = ???

  override def isWrapperFor(iface: Class[_]): Boolean = false
}
// scalastyle:on
