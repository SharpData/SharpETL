plugins {
    id "java"
    id "application"
    id "scala"
    id "com.github.alisiikh.scalastyle" version "3.4.1"
    id "com.github.maiflai.scalatest" version "0.32"
    id "maven-publish"
    //id "org.scoverage" version "7.0.0"
}

group = 'com.github.sharpdata.sharpetl'
sourceCompatibility = 1.8
version = '0.2.0'

ext {
    scalaVersion = scalaVersion
    sparkVersion = sparkVersion
    scalaCompt = scalaCompt
}

subprojects {
    version "0.1.0"
}

allprojects {
    apply plugin: "java"
    apply plugin: "scala"
    apply plugin: "idea"
    //apply plugin: "org.scoverage"

    sourceCompatibility = 1.8

    //https://mvnrepository.com/repos
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://jitpack.io' }
        google()
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
    }

    scala {
        zincVersion = "1.7.1"
    }

    /*scoverage {
        if (scalaVersion.startsWith("2.11")) {
            scoverageVersion = "1.4.11"
        } else {
            scoverageVersion = "2.0.8"
        }
        excludedFiles = [".*datasource.*", ".*Config", ".*Exception", ".*Accessor"]
    }*/

    dependencies {
        implementation "org.scala-lang:scala-library:$scalaCompt"
        implementation "org.scala-lang.modules:scala-collection-compat_$scalaVersion:2.6.0"
    }

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.forkOptions.with {
            memoryMaximumSize = '1g'
            jvmArgs = ['-XX:MaxMetaspaceSize=512m', '-Xss10m', '-Xss512M']
        }
        scalaCompileOptions.additionalParameters = [
                "-language:postfixOps",
                "-deprecation",                      // Emit warning and location for usages of deprecated APIs.
                "-encoding", "utf-8",                // Specify character encoding used by source files.
                "-explaintypes",                     // Explain type errors in more detail.
                "-feature",                          // Emit warning and location for usages of features that should be imported explicitly.
                "-language:existentials",            // Existential types (besides wildcard types) can be written and inferred
                "-language:experimental.macros",     // Allow macro definition (besides implementation and application)
                "-language:higherKinds",             // Allow higher-kinded types
                "-language:implicitConversions",     // Allow definition of implicit functions called views
                "-unchecked",                        // Enable additional warnings where generated code depends on assumptions.
                "-Xcheckinit",                       // Wrap field accessors to throw an exception on uninitialized access.
                //"-Xfatal-warnings",                  // Fail the compilation if there are any warnings.
                "-Xlint:adapted-args",               // Warn if an argument list is modified to match the receiver.
                "-Xlint:delayedinit-select",         // Selecting member of DelayedInit.
                "-Xlint:doc-detached",               // A Scaladoc comment appears to be detached from its element.
                "-Xlint:inaccessible",               // Warn about inaccessible types in method signatures.
                "-Xlint:infer-any",                  // Warn when a type argument is inferred to be `Any`.
                "-Xlint:option-implicit",            // Option.apply used implicit view.
                "-Xlint:package-object-classes",     // Class or object defined in package object.
                "-Xlint:poly-implicit-overload",     // Parameterized overloaded implicit methods are not visible as view bounds.
                "-Xlint:private-shadow",             // A private field (or class parameter) shadows a superclass field.
                "-Xlint:stars-align",                // Pattern sequence wildcard must align with sequence component.
                "-Xlint:type-parameter-shadow",      // A local type parameter shadows a type already in scope.
                "-Ywarn-dead-code",                  // Warn when dead code is identified.
                "-Ywarn-numeric-widen",              // Warn when numerics are widened.
                "-Ywarn-unused",
        ]
    }
}
